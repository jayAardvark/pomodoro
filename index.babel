class Pomodoro extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      breakLength: 5,
      sessionLength: 25,
      timeLeftMinutes: 25,
      timeLeftSeconds: 0,
      timerStatus: true,
      timerLabel: true
    };
    let startVar;
    //this.handleClickStop = this.handleClickStop.bind(this)
  }

  handleClickSessionDec = () => {
    //why is this method purple and the others are yellow?
    if (this.state.sessionLength > 1) {
      this.setState({
        sessionLength: this.state.sessionLength - 1,
        timeLeftMinutes: this.state.sessionLength - 1,
        timeLeftSeconds: 0
      });
    }
  };

  handleClickSessionInc = () => {
    if (this.state.sessionLength < 60) {
      this.setState({
        sessionLength: this.state.sessionLength + 1,
        timeLeftMinutes: this.state.sessionLength + 1,
        timeLeftSeconds: 0
      });
    }
  };

  handleClickBreakDec = () => {
    if (this.state.breakLength > 1) {
      this.setState({
        breakLength: this.state.breakLength - 1
      });
    }
  };

  handleClickBreakInc = () => {
    if (this.state.breakLength < 60) {
      this.setState({
        breakLength: this.state.breakLength + 1
      });
    }
  };

  stopSound = () => {
    console.log("stop");
    const audio = this.refs["sound"];
    audio.pause();
    audio.currentTime = 0;
  };

  handleClickReset = () => {
    this.stopSound();

    clearInterval(startVar);

    this.setState({
      breakLength: 5,
      sessionLength: 25,
      timeLeftMinutes: 25,
      timeLeftSeconds: 0,
      timerStatus: true,
      timerLabel: true
    });
    console.log(this.state.timerStatus + " reset status");
  };

  triggerSound = () => {
    const audio = this.refs["sound"];
    audio.play();
    console.log("yesh");
  };

  handleClickStart = () => {
    this.setState({
      timerStatus: !this.state.timerStatus
    });
    console.log(this.state.timerStatus + " play status");
    let minutes = this.state.timeLeftMinutes;
    let seconds = this.state.timeLeftSeconds;
    /*minutes = 0;
    seconds = 2;*/
    if (this.state.timerStatus == true) {
      startVar = setInterval(() => {
        if (seconds == 0 && minutes != 0) {
          minutes--;
          seconds = 59; //change back to 59
        } else if (seconds == 0 && minutes == 0) {
          console.log("first");
          //clearInterval(startVar);
          this.triggerSound(); //insert sound somewhere here
          this.setState({
            timerLabel: !this.state.timerLabel
          });
          if (this.state.timerLabel == true) {
            minutes = this.state.sessionLength;
            seconds = 0;
          } else {
            minutes = this.state.breakLength;
            seconds = 0;
          }
        } else {
          seconds--;
        }

        this.setState({
          timeLeftMinutes: minutes,
          timeLeftSeconds: seconds
        });
        console.log("start/stop");
      }, 1000);
    } else {
      clearInterval(startVar);
      console.log(this.state.timerStatus + " pause status");
    }
  };

  render() {
    return (
      <div className="big-grid-container">
        <div className="session-container">
          <h3 id="session-label">session length</h3>
          <button
            type="button"
            className="btn btn-success"
            id="session-decrement"
            onClick={this.handleClickSessionDec}
          >
            less
          </button>
          <h6 id="session-length">{this.state.sessionLength}</h6>
          <button
            type="button"
            className="btn btn-success"
            id="session-increment"
            onClick={this.handleClickSessionInc}
          >
            more
          </button>
        </div>
        <div className="break-container">
          <h3 id="break-label">break length</h3>
          <button
            type="button"
            className="btn btn-success"
            id="break-decrement"
            onClick={this.handleClickBreakDec}
          >
            less
          </button>
          <h6 id="break-length">{this.state.breakLength}</h6>
          <button
            type="button"
            className="btn btn-success"
            id="break-increment"
            onClick={this.handleClickBreakInc}
          >
            more
          </button>
        </div>
        <div className="time-container">
          <h2 id="timer-label">
            {this.state.timerLabel == true ? "session" : "break"}
            {/*does this need changing?*/}
          </h2>
          <h1 id="time-left">
            {this.state.timeLeftMinutes >= 10
              ? this.state.timeLeftMinutes
              : "0" + this.state.timeLeftMinutes}
            :{this.state.timeLeftSeconds >= 10
              ? this.state.timeLeftSeconds
              : "0" + this.state.timeLeftSeconds}
          </h1>
          {/*may need to change to ternary to match 'timer-label' if it's break*/}
        </div>
        <div className="buttons-container">
          <button
            type="button"
            className="btn btn-success"
            id="start_stop"
            onClick={this.handleClickStart}
          >
            start/stop
          </button>

          <button
            type="button"
            className="btn btn-success"
            id="reset"
            onClick={this.handleClickReset}
          >
            reset
          </button>
          <audio
            id="beep"
            src="https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3"
            ref={"sound"}
          />
        </div>
      </div>
    );
  }
}

ReactDOM.render(<Pomodoro />, document.getElementById("target-node"));
